= miu - система одновременного кодирования, документирования и тестирования

== Что такое miu

В одном файле miu можно набрать статью, в нём же - код и тесты к нему, а потом протестировать код и создать документацию, набрав всего лишь одну команду **miu**.

== Быстрый старт

miu считает любой текст примыкающий к началу строки текстом статьи, а с отступом - кодом.

	my $abs = 16;	# 16
	
теперь я запущу команду
	
	`miu 0x -c` # 0x-miu.miu.pl ... ok\n
	
файл статьи 0x назвается у меня **miu/0x-miu.miu.pl**. Он будет выполнен, как тест. Точки - это успешно пройденные тесты. **E** - не пройденные. **F** - которые умерли через die.
Точки соответствуют строкам кода с **#**.
Выполняются все файлы начинающиеся на 0x. 

То что стоит после **#** считается строкой для сравнения без начальных и концевых пробелов. Если нам нужно сравнить с выражением perl, то ставим **##**. Сравните:
	
	1+5 # 6
	1+5 ## 1+5
	" 26\n" # \s26\n
	bless {a=>2}, "Class" ## bless {a=>2}, "Class"
	
	# ну а это просто комментарий, так как перед ним ничего нет!
	
Львиная доля тестов приходится как раз на умное сравнение (обратите внимание на последний тест). Однако иногда мне бы хотелось сказать "больше" или "меньше".
	
	2**3 #< 10
	8 #!= 3
	"8" #== 8
	"meat" #ne eat
	"abc" ##lt "eat"
	"test" #~ es.$
	{} #!~ (?i)^array
	123456 #startswith 123
	123456 #endswith 456
	
Если тест бросает исключение, то его можно протестировать так:
	
	die "myexception" #@ startswith myexception
	die "myexception" ##@ !~ qr/чего\?/
	die "myexception" #@ !~ чего\?
	
Тестируем поток вывода:
	
	print "123\n" #>> 123\n
	
А поток ошибок:
	
	print STDERR " +26\t\r\e\v" #&> \s+26\t\r\e\v

**#!** тестирует переменную ошибок ввода-вывода $!
	
	open $f, "/"; ##! ""
	
Если необходимо захватить несколько строк на которых должно произойти исключение, то используем `$@`:

	eval {
		die "abc";
	};
	$@;			#startswith abc
	
Не используйте тесты в блоке `eval`, т.к. они бросают исключения.

Если нужно проверить ввод-вывод нескольких строк оберните их в функцию:

    sub for_io_test {
    
        print "12";
        print "3\n";
        
    }
	
	for_io_test(); #>> 123\n

=== Тестируем javascript

В одном файле можно тестировать и perl и javascript одновременно.

Для переключения на тест js используйте **[test js]**, а обратно: **[test perl]**.

**[test js]**
[test js]

	1+5 // 6
	1+5 //# 1+5
	" 26\n" // \s26\n
	{a: [2], b: 3, c: 4} //# {a: [2], b: 3, c: 4}

**[test perl]**
	
Подробнее о тестировании javascript [тут](https://github.com/darviarush/miu/blob/master/mark/10-miu.markdown "Тестирование javascript").

На данном этапе развития `miu` тесты `javascript` будут выполнены после или перед тестами `perl`.

`miu` умеет запускать **javascript** тесты в браузере. Для переключения на такие тесты используйте **[test jsb]** в начале. Подробнее [тут](https://github.com/darviarush/miu/blob/master/mark/11-in-browser.markdown "Тестирование javascript в браузере").

**[test jsb]**

//[test jsb]

window 		// [object Window]
document	// [object HTMLDocument]

[test perl]

== Программный код

Код программы так же может быть записан в файл miu. Он так же должен иметь отступ.
Чтобы переключатся между кодом и тестом нужно использовать @@файл и `[test]` с начала строки.

@@A/A.pm
	
	package A::A;
	
	sub A { print "A"; }
	
    1;
    
**[test]**
[test]
	
	use A::A;
	&A::A::A; #>> A
	&A::A::N; #>> N
    

@@./.miu/test.pl
	
    use lib ".miu/lib";
    use A::A;
	&A::A::A;
	
**[test]**
[test]
	
	require "./.miu/test.pl"; #>> AN
	`perl .miu/test.pl` # AN

Изменить путь к каталогу **lib** можно ключём `-u path/to/mylib`.  
А к каталогу с кодом программы: `-b path/to/myexecutefile`

Ну или указывать абсолютные пути: `@@/path` или `./path`.

Тест выполняется после того, как сформированы все файлы из него. Поэтому можно дописывать файлы

@@A/A.pm

    sub N { print "N"; }
	
	1;
    
@@./.miu/test.pl

    &A::A::N;
    
    1;

    
[test]

== Как выполнить тесты из раздела статьи

=== Маски файлов и разделов

Часто пишешь-пишешь, написал огромную статью, тесты все в ней запускать - не хочется. Нужно запустить какой-то, над которым работаешь. 
	
	`miu 0x метки Второй -c` # 0x-miu.miu.pl .. ok\n
	
Выполнятся все тесты в разделе название которого начинается на ***метки*** или ***Метки*** или ***Второй*** или ***Второй*** - сравнение регистронезависимое.

Масок может быть указано сколько угодно.

Маски файлов можно указывать через ":":

	`miu 0x:0y метки какие -c` # 0x-miu.miu.pl . ok\n0y-miu.miu.pl ... ok\n

Маски могут начинаться на `^` и заканчиваться на `$`. Соответственно маска должна стоять с начала или в конце распознаваемой строки.

	`miu 0x метки\$ ^Второй -c` # 0x-miu.miu.pl . ok\n

Не забывайте в шелле экранировать доллар.
	
Без `^` и `$` маски будут распознавать названия посередине: 
	
	`miu 0x етк торо -c` # 0x-miu.miu.pl .. ok\n
	
**== Метки 1**

В статье 0x-miu.miu.pl это раздел ***Метки 1***.
Если таких разделов два, то выполнятся оба. Несколько - несколько.

Как маски файлов, так и метки поддерживают

=== Инициализатор

Для того, чтобы инициализирующий код добавлялся, когда отбирается только тест разделов статьи нужно воспользоваться **[init]** с начала строки.

**[init]**

	# инициализация тестов

**[test]**

**init** запишется в тест, только если за ним будут исполняемые разделы (см. предыдущий раздел).

== Конфигурационный файл

В корне Вашего проекта создайте файл `.rrrumiurc`. `miu` считает его при запуске.

@@.rrrumiurc
	
	# конфигурационный файл miu

	# директории указываются от 

	# директория с файлами miu
	# default: miu
	miu_dir		= miu

	# главная директория для создаваемых файлов
	# default: .miu
	out_dir		= .miu

	# директория куда будут выложены статьи в формате markdown
	# default: $out_dir/mark
	article_dir	= mark

	# директория куда будут выложены файлы `@@ ...`
	# default: $out_dir/lib
	lib_dir		= .miu/lib

	# директория для выкладывания тестов
	# default: $out_dir/t
	t_dir		= t

	# директория которая будет текущей при выполнении тестов
	# default: $t_dir
	run_dir		= .

	# директория для логов
	# default: $out_dir/log
	log_dir     = .miu/logs

	# задаёт из какого файла miu сделать README.md
	# если не указан - не создаётся
	readme		= 00-miu.miu.pl

	# репортёр. Список репортёров см. в lib/Miu/Reporter
	reporter	= dot

	# путь к браузеру для [jsb]-тестов
	browser		= /bin/firefox

[test]
	
== Какие файлы создаёт miu

В проекте с тестами `miu` требуется создать файл `rrrumiurc` с настройками. По умолчанию:

miu ищет файлы в директории **miu**.
	
	print `pwd`;
	`cd ..; miu -c miu/0x -o miu/.miu` # miu/0x-miu.miu.pl ... ok\n
	
После запуска miu создат выходной каталог __.miu__ в текущей директории.  
Вы можете использовать ключ -o, чтобы изменить его.

4. **.miu/название_файла.markdown**
3. **.miu/название_файла.t**
1. **.miu/название_файла.log**
2. **.miu/название_файла.stat**
5. **.miu\miu-tmp-fh**


1. *.markdown - это документация на языке markdown. То есть, это копия файла miu\название_файла.miu, без тегов `[test]` и `@@файл`
2. *.t - это тест
3. *.log - это вывод теста
5. *.stat - то же что и *.log, только с названиями токенов
6. **miu-tmp-fh** - вспомогательный файл для тестирования ввода-вывода (#>> и #&>)


Эти файлы перезаписываются после каждого теста.

Можно сразу вывести ошибки на консоль:

	`miu -c -l 0x` #~ \.*
	
После первой же ошибки остальные файлы не выполнятся.

== Установка

**miu** выложена на github и bitbucket:

1. https://github.com/darviarush/miu
2. https://bitbucket.org/darij/miu 

Установить через git:

1. git clone git@github.com:darviarush/miu.git
2. git clone git@bitbucket.org:darij/miu.git 

Далее выполните `make link`, эта команда создаст символьную ссылку на исполняемый файл miu в директории **/bin/**.

== Как конвертировать markdown в html

Просто установите модуль __perl__ **Text::Markdown**. miu его сразу "подхватит" и будет генерировать файл __*.html__ в каталоге __.miu__.

`cpan install Text::Markdown`

=== Как конвертировать markdown в bbcode

Нужен __Text::Markdown__:

`cpan install Text::Markdown`

Необязательно:

`cpan install Text::Typography`

`cpan install HTML::Entities`



== Откуда название **miu**?

miu названа в честь Рррумиу - героини романа Павла Шумила "Этот мир придуман не нами" из цикла "Окно контакта - 3".

== TODO или куда miu будет развиваться

Что ещё предстоит сделать:

1. Поддержка других языков программирования - сейчас поддерживается только **perl**
3. Конвертеры из markdown в другие языки размётки. На данный момент miu создаёт html и bbcode, но есть же ещё различные вариации: wiki, trac, lorcode и т.д.
2. Автоматическая публикация получившихся статей на различных сайтах. Например, на habrahabr.ru, linux.org.ru, livejournal.com, wikipedia.org и т.д.

